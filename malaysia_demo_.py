#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Dec 19, 2021 04:57:57 PM CST  platform: Windows NT

import sys
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

# import malaysia_demo_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    # malaysia_demo_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    malaysia_demo_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('vista')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1276x666")
        top.title("Malaysia's Population and Demographics")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="white smoke",
                # command=(malaysia_demo_support.{},
                font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                foreground="#000000",
                label="Help")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="white smoke",
                command=self.help,
                font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                foreground="#000000",
                label="Help")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="white smoke",
                command=self.about,
                font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                foreground="#000000",
                label="About")
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        # self.sub_menu.add_cascade(menu=self.sub_menu1,
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="Save")
        # self.sub_menu1.add_separator(
        #         background="#d9d9d9")
        # self.sub_menu1.add_command(
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="Close")
        # self.sub_menu12 = tk.Menu(top,tearoff=0)
        # self.menubar.add_cascade(menu=self.sub_menu12,
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="Edit")
        # self.sub_menu12.add_command(
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="NewCommand")
        # self.sub_menu12.add_command(
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="NewCommand")
        # self.sub_menu123 = tk.Menu(top,tearoff=0)
        # self.menubar.add_cascade(menu=self.sub_menu123,
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="Help")
        # self.sub_menu123.add_command(
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="About")
        # self.sub_menu123.add_command(
        #         activebackground="#ececec",
        #         activeforeground="#000000",
        #         background="#d9d9d9",
        #         # command=malaysia_demo_support.{},
        #         font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
        #         foreground="#000000",
        #         label="Help")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.008, rely=0.015, relheight=0.971
                , relwidth=0.98)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Population by Gender and Ethnic",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="white smoke")
        self.TNotebook1_t0.configure(highlightbackground="white smoke")
        self.TNotebook1_t0.configure(highlightcolor="black")

        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Population by State", compound="left", underline="-1", )
        self.TNotebook1_t1.configure(background="white smoke")
        self.TNotebook1_t1.configure(highlightbackground="white smoke")
        self.TNotebook1_t1.configure(highlightcolor="black")

        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="Death Population by Gender",compound="left",underline="-1",)
        self.TNotebook1_t2.configure(background="white smoke")
        self.TNotebook1_t2.configure(highlightbackground="white smoke")
        self.TNotebook1_t2.configure(highlightcolor="black")

        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(3, text="Death Population by State", compound="left", underline="-1", )
        self.TNotebook1_t3.configure(background="white smoke")
        self.TNotebook1_t3.configure(highlightbackground="white smoke")
        self.TNotebook1_t3.configure(highlightcolor="black")

        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(4, text="Life Expectency", compound="left", underline="-1", )
        self.TNotebook1_t4.configure(background="white smoke")
        self.TNotebook1_t4.configure(highlightbackground="white smoke")
        self.TNotebook1_t4.configure(highlightcolor="black")

        self.TNotebook1_t5 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t5, padding=3)
        self.TNotebook1.tab(5, text="Mortality", compound="left", underline="-1", )
        self.TNotebook1_t5.configure(background="white smoke")
        self.TNotebook1_t5.configure(highlightbackground="white smoke")
        self.TNotebook1_t5.configure(highlightcolor="black")

        # self.TNotebook1_t6 = tk.Frame(self.TNotebook1)
        # self.TNotebook1.add(self.TNotebook1_t6, padding=3)
        # self.TNotebook1.tab(6, text="Info", compound="left", underline="-1", )
        # self.TNotebook1_t6.configure(background="#d9d9d9")
        # self.TNotebook1_t6.configure(highlightbackground="#d9d9d9")
        # self.TNotebook1_t6.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(self.TNotebook1_t0)
        self.Frame1.place(relx=0.01, rely=0.094, relheight=0.805, relwidth=0.61)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Frame2 = tk.Frame(self.TNotebook1_t1)
        self.Frame2.place(relx=0.024, rely=0.031, relheight=0.93, relwidth=0.956)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")

        self.Frame3 = tk.Frame(self.TNotebook1_t0)
        self.Frame3.place(relx=0.63, rely=0.203, relheight=0.477, relwidth=0.364)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")

        self.Frame4 = tk.Frame(self.TNotebook1_t2)
        self.Frame4.place(relx=0.024, rely=0.031, relheight=0.93, relwidth=0.956)
        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#d9d9d9")

        self.Frame5 = tk.Frame(self.TNotebook1_t3)
        self.Frame5.place(relx=0.024, rely=0.031, relheight=0.93, relwidth=0.956)
        self.Frame5.configure(relief='groove')
        self.Frame5.configure(borderwidth="2")
        self.Frame5.configure(relief="groove")
        self.Frame5.configure(background="#d9d9d9")

        self.Frame6 = tk.Frame(self.TNotebook1_t4)
        self.Frame6.place(relx=0.024, rely=0.031, relheight=0.93, relwidth=0.956)
        self.Frame6.configure(relief='groove')
        self.Frame6.configure(borderwidth="2")
        self.Frame6.configure(relief="groove")
        self.Frame6.configure(background="#d9d9d9")

        self.Frame7 = tk.Frame(self.TNotebook1_t5)
        self.Frame7.place(relx=0.024, rely=0.031, relheight=0.93, relwidth=0.956)
        self.Frame7.configure(relief='groove')
        self.Frame7.configure(borderwidth="2")
        self.Frame7.configure(relief="groove")
        self.Frame7.configure(background="#d9d9d9")

        # df1 = pd.read_excel(r'D:\TutoVisu\Data\csv\death_state_gender.xlsx')
        #
        # try:
        #     self.canvas.get_tk_widget().pack_forget()
        # except AttributeError:
        #     pass
        # fig = Figure(figsize=(6, 5), dpi=110, constrained_layout=True)
        # fx = fig.add_subplot(111)
        # fx.legend(loc='upper left')
        # fx.set_xlabel('Year')
        # fx.set_ylabel('Population (000)')
        # fx.set_title('Population by State in Malaysia (2010-2019)')
        # sns.scatterplot(x='Year', y='death', style='Sex', hue='Sex', data=df1, ax=fx)

        # df = pd.read_excel(r'D:\TutoVisu\Data\csv\population_gender_ethnic.xlsx')
        #
        # try:
        #     self.canvas.get_tk_widget().pack_forget()
        # except AttributeError:
        #     pass
        # fig = Figure(figsize=(6, 5), dpi=110, constrained_layout=True)
        # f = fig.subplots()
        # f.legend(loc='upper left')
        # f.set_xlabel('Year')
        # f.set_ylabel('Population (000)')
        # f.set_title('Population by Gender in Malaysia (2010-2019)')
        #
        # df.reset_index().pivot_table(index='Year', columns='Sex', values='Population', aggfunc='mean').plot(kind='line',
        #                                                                                                     ax=f)
        #
        # self.canvas = FigureCanvasTkAgg(fig, master=self.Frame1)
        # self.canvas.get_tk_widget().pack()
        # self.canvas.draw()

        self.state_population()
        self.gender_population()
        self.ethnic_population()
        self.rate_infant_maternal()
        self.life_expectancy()
        self.death_state()
        self.death_gender()

    def help(self):

        newWindow = tk.Toplevel(root)
        newWindow.title("Help")
        newWindow.geometry("600x400")
        newWindow.configure(background="white smoke")

        self.Label1 = tk.Label(newWindow)
        self.Label1.place(relx=0.183, rely=0.077, height=21, width=354)
        self.Label1.configure(background="white smoke")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='Data Visualization of Malaysia Demographic Through the Years')

        self.Labelframe1 = tk.LabelFrame(newWindow)
        self.Labelframe1.place(relx=0.17, rely=0.24, relheight=0.537
        , relwidth = 0.676)

        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='DATA')
        self.Labelframe1.configure(background="LightSteelBlue3")

        self.Label2 = tk.Label(self.Labelframe1)
        self.Label2.place(relx=0.163, rely=0.154, height=21, width=284
        , bordermode = 'ignore')

        self.Label2.configure(background="LightSteelBlue3")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='1. Population by Gender, Ethnic and State')

        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.163, rely=0.359, height=21, width=284
        , bordermode = 'ignore')
        self.Label3.configure(background="LightSteelBlue3")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='2. Death Population by Gender and State')

        self.Label4 = tk.Label(self.Labelframe1)
        self.Label4.place(relx=0.14, rely=0.564, height=21, width=284
        , bordermode = 'ignore')
        self.Label4.configure(background="LightSteelBlue3")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='3. Rate of Life Expectancy')

        self.Label5 = tk.Label(self.Labelframe1)
        self.Label5.place(relx=0.14, rely=0.769, height=21, width=284
        , bordermode = 'ignore')
        self.Label5.configure(background="LightSteelBlue3")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='4. Rate of infant and Maternal Mortality')

        self.Label6 = tk.Label(newWindow)
        self.Label6.place(relx=0.216, rely=0.826, height=21, width=314)
        self.Label6.configure(background="white smoke")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='Each tab represent data above.')

    def about(self):

        newWindow = tk.Toplevel(root)
        newWindow.title("About")
        newWindow.geometry("400x200")
        newWindow.configure(background="white smoke")

        self.Labelframe1 = tk.LabelFrame(newWindow)
        self.Labelframe1.place(relx=0.1, rely=0.1, relheight=0.725
        , relwidth = 0.825)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''version 1.0''')
        self.Labelframe1.configure(background="LightSteelBlue3")
        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.057, rely=0.207, height=101, width=294
        , bordermode = 'ignore')
        self.Label1.configure(background="LightSteelBlue3")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(
            text='''Explore Malaysia Demographic through the 
            
        year based on the data visualization 
            
        by observing varies graphs.''')

    def gender_population(self):

        df = pd.read_excel(r'D:\TutoVisu\Data\csv\population_gender_ethnic.xlsx')

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(6, 5), dpi=100, constrained_layout=True)
        f = fig.subplots()
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Population (000)')
        f.set_title('Population by Gender in Malaysia (2010-2019)')

        df.reset_index().pivot_table(index='Year', columns='Sex', values='Population',  aggfunc='mean').plot(kind='line', ax=f)

        self.canvas3 = FigureCanvasTkAgg(fig, master=self.Frame3)
        self.canvas3.get_tk_widget().pack()
        self.canvas3.draw()

    def state_population(self):

        df = pd.read_excel(r'D:\TutoVisu\Data\csv\population_state - Copy.xlsx')
        df.drop(df.index[df['State'] == 'Malaysia'], inplace=True)
        df.drop(df.index[df['State'] == 'W.P. Kuala Lumpur'], inplace=True)
        df['Year'] = df['Year'].astype(object)
        # chart = df.reset_index().pivot_table(index='Year', columns='State', values='Population', aggfunc='mean').plot(kind='line', ax=f)

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.gca()
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Population (000)')
        f.set_title('Population by State in Malaysia (2016-2018)')
        # f.plot(chart)

        # df.reset_index().pivot_table(index='Year', columns='State', values='Population', aggfunc='mean').plot(
        #     kind='line', ax=f)
        sns.lineplot(x='Year', y='Population', hue='State', data=df, ax=f)

        self.canvas1 = FigureCanvasTkAgg(fig, master=self.Frame2)
        self.canvas1.get_tk_widget().pack()
        self.canvas1.draw()

    def ethnic_population(self):

        df = pd.read_excel(r'D:\TutoVisu\Data\csv\population_gender_ethnic.xlsx')

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.add_subplot(111)
        df.reset_index().pivot_table(index='Year', columns='Ethnic', values='Population', aggfunc='mean').plot(
            kind='bar', legend=False, ax=f)
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Population (000)')
        f.set_title('Population by Ethnic in Malaysia (2010-2019)')

        self.canvas2 = FigureCanvasTkAgg(fig, master=self.Frame1)
        self.canvas2.get_tk_widget().pack()
        self.canvas2.draw()

    def death_state(self):

        df = pd.read_excel(r'D:\TutoVisu\Data\csv\death_state_gender.xlsx')

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.add_subplot(111)
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Population (000)')
        f.set_title('Death Population by State in Malaysia (2001-2017)')
        sns.lineplot(x='Year', y='death', hue='State', data=df, ax=f)

        self.canvas6 = FigureCanvasTkAgg(fig, master=self.Frame5)
        self.canvas6.get_tk_widget().pack()
        self.canvas6.draw()

    def death_gender(self):

        df = pd.read_excel(r'D:\TutoVisu\Data\csv\death_state_gender.xlsx')

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.add_subplot(111)
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Population (000)')
        f.set_title('Death Population by Gender in Malaysia (2002-2017)')
        sns.scatterplot(x='Year', y='death', style='Sex', hue='Sex', data=df, ax=f)

        self.canvas = FigureCanvasTkAgg(fig, master=self.Frame4)
        self.canvas.get_tk_widget().pack()
        self.canvas.draw()

    def rate_infant_maternal(self):

        # df = pd.read_excel(r'D:\TutoVisu\Data\csv\population_gender_ethnic.xlsx')
        # reading the files
        f1 = pd.read_excel(r'D:\TutoVisu\Data\csv\Number_and_rate_Maternal_deaths_by_state_2010-2018.xlsx')
        f2 = pd.read_excel(r'D:\TutoVisu\Data\csv\Number_and_rate_of_Infant_mortality_by_state_and_sex_2010-2018.xlsx')

        # merging the files
        f3 = f1[["Year","Maternal mortality ratio"]].merge(f2[["Year","Rate on Infant mortality", "State"]],on="Year", how="left")

        # creating a new file
        f3.to_excel("Results.xlsx", index=False)
        df = pd.read_excel("Results.xlsx")

        df['Maternal mortality ratio'] = df['Maternal mortality ratio'].replace("..", regex=True).astype(float)
        df = df.set_index("State")
        df = df.drop("MALAYSIA")

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.subplots()
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Rate')
        f.set_title('Infant and Maternal Mortality in Malaysia (2010-2018)')

        df.reset_index().pivot_table(index='Year', values=['Maternal mortality ratio'],  aggfunc='mean').plot(kind='line', ax=f)
        df.reset_index().pivot_table(index='Year', values=['Rate on Infant mortality'], aggfunc='mean').plot(kind='line',
                                                                                                            ax=f)

        self.canvas4 = FigureCanvasTkAgg(fig, master=self.Frame7)
        self.canvas4.get_tk_widget().pack()
        self.canvas4.draw()

    def life_expectancy(self):

        df = pd.read_csv(r'D:\TutoVisu\Data\csv\m-20210305114353_202103051143530_life-expectancy-by-age-ethnic-group-and-sex-malaysia-2010-2020.csv')
        # print(df)
        # df = df.set_index("Year")
        # df = df.drop(["2019p","2020e"])
        # print(df.dtypes)

        try:
            self.canvas.get_tk_widget().pack_forget()
        except AttributeError:
            pass
        fig = Figure(figsize=(11, 6), dpi=110, constrained_layout=True)
        f = fig.add_subplot(111)
        f.legend(loc='upper left')
        f.set_xlabel('Year')
        f.set_ylabel('Life Expectancy Rate')
        f.set_title('Life Expectancy Rate by Gender in Malaysia (2010-2019)')
        # sns.scatterplot(x='Year', y='Life expectancy', style='Sex', hue='Sex', data=df, ax=f)
        df.reset_index().pivot_table(index='Year', values='Life expectancy', aggfunc='mean').plot(
            color='g', kind='line', legend=False, ax=f)
        sns.barplot(x='Year', y='Life expectancy', hue='Sex', data=df, ax=f)
        # with sns.axes_style('white'):
        #     f = sns.catplot("Year", data=df, aspect=4.0, kind='count',
        #                        hue='Sex', order=range(2010, 2018))
        #     # g = sns.factorplot("Year", data=df, ax=f, aspect=4.0, kind='count',
        #     #                  hue='Sex', order=range(2010, 2018))
        #     f.set_ylabels('Number of Planets Discovered')

        self.canvas5 = FigureCanvasTkAgg(fig, master=self.Frame6)
        self.canvas5.get_tk_widget().pack()
        self.canvas5.draw()

if __name__ == '__main__':
    vp_start_gui()
